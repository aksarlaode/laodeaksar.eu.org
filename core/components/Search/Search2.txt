import React from 'react';
import FocusTrap from 'focus-trap-react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { createPortal } from 'react-dom';
import {
  Flex,
  Icon,
  Label,
  useTheme
} from '@bahutara/design-system';

import useBodyScrollLock from '@/hooks/useBodyScrollLock';

import { CommandCenterStatic } from './CommandCenterStatic';
import { HEIGHT, MAX_HEIGHT } from './constants';
import InputBox from "./InputBox";
import {
  Overlay,
  SearchBox,
  FormWrapper,
  SearchResults,
  Result
} from './Styles';
import { InstantSearch } from 'react-instantsearch-dom';
import algoliasearch from 'algoliasearch';

type Result = {
  type: 'snippet' | 'blog';
  slug: string;
  title: string;
};

interface Props {
  onClose: () => void;
}

const getClient = algoliasearch(
  process.env.ALGOLIA_APPLICATION_ID as string,
  process.env.ALGOLIA_ADMIN_KEY as string
);

const Search = (props: Props) => {
  const { onClose } = props;

  const [results, setResults] = React.useState<Result[]>([]);

  useBodyScrollLock();
  const router = useRouter();

  const SearchRef = React.useRef<HTMLDivElement>(null);

  const clickOutside = (e: React.BaseSyntheticEvent) => {
    if (
      SearchRef &&
      SearchRef.current &&
      SearchRef.current.contains(e.target)
    ) {
      return null;
    }

    return onClose();
  };

  const { dark } = useTheme();

  return createPortal(
    <FocusTrap>
      <aside>
        <Overlay
          initial={{
            backgroundColor: dark ? 'rgba(0,0,0,0)' : 'rgba(241, 243, 247, 0)'
          }}
          animate={{
            backgroundColor: dark
              ? 'rgba(0,0,0,0.8)'
              : 'rgba(241, 243, 247, 0.8)'
          }}
          exit={{
            backgroundColor: dark ? 'rgba(0,0,0,0)' : 'rgba(241, 243, 247, 0)'
          }}
          // transition={{ duration: 0.4 }}
          onClick={clickOutside}
          aria-label="search"
          // The dialog container element has aria-modal set to true.
          aria-modal="true"
          tabIndex={-1}
          // All elements required to operate the dialog are descendants of the element that has role dialog.
          role="dialog"
        >
          <SearchBox
            initial={{ scale: 0.8, opacity: 0, x: '-50%' }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{
              scale: 0.5,
              opacity: 0,
              transition: { duration: 0.15, delay: 0.1 }
            }}
            transition={{
              ease: 'easeOut',
              duration: 0.2
            }}
          >
            <InstantSearch searchClient={getClient} indexName="laodeaksar">
              <FormWrapper ref={SearchRef}>
                  <InputBox />
                  <Label
                    style={{
                      width: '120px'
                    }}
                  >
                    test
                    {/*debouncedSearchQuery !== '' && !loading
                      ? `${results.length} results`
                  : null*/}
                  </Label>
              </FormWrapper>
              {debouncedSearchQuery !== '' ? (
                <SearchResults
                  style={{
                    height:
                      results.length * HEIGHT >= MAX_HEIGHT
                        ? MAX_HEIGHT
                        : results.length * HEIGHT,
                    transition: 'height 0.4s ease-out',
                    willChange: 'height'
                  }}
                >
                  {results.map((result, index) => (
                    <Result
                      key={result.slug}
                      id={result.slug}
                      selected={selectedResult === result}
                      onPointerEnter={() => handlePointer(index)}
                    >
                      <Link
                        href={`/${
                          result.type === 'snippet' ? 'snippets' : 'blog'
                        }/${result.slug}`}
                      >
                        <a onClick={() => setTimeout(onClose, 600)}>
                          {result.title}
                        </a>
                      </Link>
                      <Flex
                        alignItems="center"
                        justifyContent="center"
                        css={{
                          marginLeft: '$4',
                          size: '35px',
                          backgroundColor: 'var(--laodeaksar-colors-emphasis)',
                          borderRadius: '$1',

                          path: {
                            stroke: 'var(--laodeaksar-colors-brand)'
                          }
                        }}
                      >
                        <Icon.Enter size={4} />
                      </Flex>
                    </Result>
                  ))}
                </SearchResults>
              ) : (
                <CommandCenterStatic />
              )}
            </InstantSearch>
          </SearchBox>
        </Overlay>
      </aside>
    </FocusTrap>,
    document.body
  );
};

export { Search };
